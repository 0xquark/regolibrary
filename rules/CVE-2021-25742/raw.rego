package armo_builtins

deny[msga] {
	deployment := input[_]
	deployment.kind == "Deployment"
	image := deployment.spec.template.spec.containers[i].image
	isNginxImage(image)
	isTagImage(image)
	isVulnerable(image, deployment.metadata.namespace)
	path := sprintf("spec.template.spec.containers[%v].image", [format_int(i, 10)])
	msga := {
			"alertMessage": sprintf("You may be vulnerable to CVE-2021-25742. Deployment %v", [deployment.metadata.name]),
			"failedPaths": [path],
			"fixPaths":[],
			"alertObject": {"k8SApiObjects": [deployment]},
		}
}

	
isNginxImage(image) {
	contains(image, "nginx-controller")
}

isNginxImage(image) {
	contains(image, "ingress-controller")
}

isNginxImage(image) {
	contains(image, "ingress-nginx")
}

isVulnerable(image, namespace) {
	contains(image, "@")
	version := split(image, ":")
	tag := split(version[count(version)-2], "@")[0]
    startswith(tag, "v")
    tag <= "v0.49"
}
	
isVulnerable(image, namespace) {
	contains(image, "@")
	version := split(image, ":")
	tag := split(version[count(version)-2], "@")[0]
    startswith(tag, "v")
    tag  == "v1.0.0"
}

isVulnerable(image, namespace) {
	not contains(image, "@")
	version := split(image, ":")
	tag := version[count(version)-1]
    startswith(tag, "v")
	tag <= "v0.49"
}

isVulnerable(image, namespace) {
	not contains(image, "@")
	version := split(image, ":")
	tag := version[count(version)-1]
    startswith(tag, "v")
	tag  == "v1.0.0"
}

###### without 'v'
	
isVulnerable(image, namespace) {
	contains(image, "@")
	version := split(image, ":")
	tag := split(version[count(version)-2], "@")[0]
    not startswith(tag, "v")
    tag <= "0.49"
}
	
isVulnerable(image, namespace) {
	contains(image, "@")
	version := split(image, ":")
	tag := split(version[count(version)-2], "@")[0]
    not startswith(tag, "v")
    tag  == "1.0.0"
}

isVulnerable(image, namespace) {
	not contains(image, "@")
	version := split(image, ":")
	tag := version[count(version)-1]
    not startswith(tag, "v")
	tag <= "0.49"
}
isVulnerable(image, namespace) {
	not contains(image, "@")
	version := split(image, ":")
	tag := version[count(version)-1]
    not startswith(tag, "v")
	tag  == "1.0.0"
}

isVulnerable(image, namespace) {
    configmaps := [configmap | configmap = input[_]; configmap.kind == "ConfigMap"]
	configmapOnIngressNamespace := [configmap |  configmap= configmaps[_]; configmap.metadata.namespace == namespace]
	configMapsWithSnippet := [configmap |  configmap= configmapOnIngressNamespace[_];  configmap.data["allow-snippet-annotations"] == "false"]
	count(configMapsWithSnippet) < 1
}


isTagImage(image) {
    reg := ":[\\w][\\w.-]{0,127}(\/)?"
    version := regex.find_all_string_submatch_n(reg, image, -1)
    v := version[_]
    img := v[_]
    not endswith(img, "/")
}