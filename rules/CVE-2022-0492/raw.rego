package armo_builtins


# Case 1: 
# -	Container runs as root OR allows privilege escalation (allowPrivilegeEscalation  = true or not present), AND
# -	No AppArmor , AND
# -	No SELinux, AND
# -	No Seccomp

deny[msga] {
    pod := input[_]
    pod.kind == "Pod"
    container := pod.spec.containers[i]
	begginingOfPath := "spec"
	
    isNoSELinuxNoAppArmorPod(pod)
    isNoSeccompPod(pod)

    isNoSELinuxContainer(container)
    isNoSeccompContainer(container)

    alertInfo :=  evaluateWorkloadNonRootContainer(container, pod, begginingOfPath)

    not isCAP_SYS_ADMIN(container, begginingOfPath, i)

    fixPath := getFixedPath(alertInfo, i)
    failedPath := getFailedPath(alertInfo, i) 


	msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": failedPath,
        "fixPaths": fixPath,
		"alertObject": {
			"k8sApiObjects": [pod]
		}
	}
}

deny[msga] {
    wl := input[_]
	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
	spec_template_spec_patterns[wl.kind]
	begginingOfPath := "spec.template.spec"

    pod := wl.spec.template
    container := pod.spec.containers[i]

    isNoSELinuxNoAppArmorPod(pod)
    isNoSeccompPod(pod)

    isNoSELinuxContainer(container)
    isNoSeccompContainer(container)

    alertInfo := evaluateWorkloadNonRootContainer(container, pod, begginingOfPath)

    not isCAP_SYS_ADMIN(container, begginingOfPath, i)

    fixPath := getFixedPath(alertInfo, i)
    failedPath := getFailedPath(alertInfo, i) 


	msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": failedPath,
        "fixPaths": fixPath,
		"alertObject": {
			"k8sApiObjects": [wl]
		}
	}
}

deny[msga] {
  	wl := input[_]
	wl.kind == "CronJob"
	begginingOfPath := "spec.jobTemplate.spec.template.spec"
    
    pod := wl.spec.jobTemplate.spec.template
    container = pod.spec.containers[i]

    isNoSELinuxNoAppArmorPod(pod)
    isNoSeccompPod(pod)

    isNoSELinuxContainer(container)
    isNoSeccompContainer(container)

    alertInfo := evaluateWorkloadNonRootContainer(container, pod, begginingOfPath)

    not isCAP_SYS_ADMIN(container, begginingOfPath, i)
    
    fixPath := getFixedPath(alertInfo, i)
    failedPath := getFailedPath(alertInfo, i) 

    msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": failedPath,
        "fixPaths": fixPath,
		"alertObject": {
			"k8sApiObjects": [wl]
		}
	}
}


#################################################################################
# Case 2: 
# - Container has CAP_SYS_ADMIN capability, AND
# - No AppArmor, AND
# - No SELinux

deny[msga] {
    pod := input[_]
    pod.kind == "Pod"
    container := pod.spec.containers[i]
	begginingOfPath := "spec."
	
    result := isCAP_SYS_ADMIN(container, begginingOfPath, i)

    isNoSELinuxNoAppArmorPod(pod)
    isNoSELinuxContainer(container)



	msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": [result],
        "fixPaths": [],
		"alertObject": {
			"k8sApiObjects": [pod]
		}
	}
}

# Fails if workload has container with hostPort
deny[msga] {
    wl := input[_]
	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}
	spec_template_spec_patterns[wl.kind]
	begginingOfPath := "spec.template.spec."

    pod := wl.spec.template
    container := pod.spec.containers[i]

    result := isCAP_SYS_ADMIN(container, begginingOfPath, i)

    isNoSELinuxNoAppArmorPod(pod)
    isNoSELinuxContainer(container)


	msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": [result],
        "fixPaths": [],
		"alertObject": {
			"k8sApiObjects": [wl]
		}
	}
}

# Fails if cronjob has container with hostPort
deny[msga] {
  	wl := input[_]
	wl.kind == "CronJob"
	begginingOfPath := "spec.jobTemplate.spec.template.spec."
    
    pod := wl.spec.jobTemplate.spec.template
    container = pod.spec.containers[i]

    result := isCAP_SYS_ADMIN(container, begginingOfPath, i)

    isNoSELinuxNoAppArmorPod(pod)
    isNoSELinuxContainer(container)

    msga := {
		"alertMessage": "You may be vulnerable to CVE-2022-0492",
		"packagename": "armo_builtins",
		"alertScore": 4,
		"failedPaths": [result],
        "fixPaths": [],
		"alertObject": {
			"k8sApiObjects": [wl]
		}
	}
}




isCAP_SYS_ADMIN(container, begginingOfPath, i) = path {
	capability = container.securityContext.capabilities.add[k]
    capability == "SYS_ADMIN"

    path = sprintf("%vcontainers[%v].securityContext.capabilities.add[%v]", [begginingOfPath, format_int(i, 10), format_int(k, 10)]) 
}



#################################################################################

getFailedPath(alertInfo, i) = [replace(alertInfo.failedPath,"container_ndx",format_int(i,10))] {
	alertInfo.failedPath != ""
} else = []


getFixedPath(alertInfo, i) = [{"path":replace(alertInfo.fixPath[0].path,"container_ndx",format_int(i,10)), "value":alertInfo.fixPath[0].value}, {"path":replace(alertInfo.fixPath[1].path,"container_ndx",format_int(i,10)), "value":alertInfo.fixPath[1].value}]{
	count(alertInfo.fixPath) == 2
} else = [{"path":replace(alertInfo.fixPath[0].path,"container_ndx",format_int(i,10)), "value":alertInfo.fixPath[0].value}] {
	count(alertInfo.fixPath) == 1
}  else = []





#################################################################################

# Check if appArmor or SELinux or seccompProfile is used
# Fails if none of them is used
isNoSELinuxNoAppArmorPod(pod){
    not pod.spec.securityContext.seLinuxOptions
	annotations := [pod.metadata.annotations[i] | annotaion = i; startswith(i, "container.apparmor.security.beta.kubernetes.io")]
	not count(annotations) > 0
}

isNoSELinuxContainer(container){
    not container.securityContext.seLinuxOptions
}

isNoSeccompPod(pod) {
    not pod.spec.securityContext.seccompProfile
}

isNoSeccompContainer(container) {
    not container.securityContext.seccompProfile
}










#################################################################################
# Workload evaluation 

evaluateWorkloadNonRootContainer(container, pod, begginingOfPath) = alertInfo {
	runAsNonRootValue := getRunAsNonRootValue(container, pod, begginingOfPath)
	runAsNonRootValue.value == false
	
	runAsUserValue := getRunAsUserValue(container, pod, begginingOfPath)
	runAsUserValue.value == 0

	alertInfo := chooseFirstIfDefined(runAsUserValue, runAsNonRootValue)
} else = alertInfo {
    allowPrivilegeEscalationValue := getAllowPrivilegeEscalation(container, pod, begginingOfPath)
    allowPrivilegeEscalationValue.value == true

    alertInfo := allowPrivilegeEscalationValue
}


#################################################################################

# Checking for non-root and allowPrivilegeEscalation enabled
getRunAsNonRootValue(container, pod, begginingOfPath) = runAsNonRoot {
    failedPath := sprintf("%v.container[container_ndx].securityContext.runAsNonRoot", [begginingOfPath]) 
    runAsNonRoot := {"value" : container.securityContext.runAsNonRoot, "failedPath" : failedPath, "fixPath": [] ,"defined" : true}
} else = runAsNonRoot {
	failedPath := sprintf("%v.securityContext.runAsNonRoot", [begginingOfPath]) 
    runAsNonRoot := {"value" : pod.spec.securityContext.runAsNonRoot,  "failedPath" : failedPath, "fixPath": [], "defined" : true}
} else = {"value" : false,  "failedPath" : "", "fixPath": [{"path": "spec.securityContext.runAsNonRoot", "value":"true"}], "defined" : false} {
	isAllowPrivilegeEscalationField(container, pod)
} else = {"value" : false,  "failedPath" : "", "fixPath": [{"path":  sprintf("%v.securityContext.runAsNonRoot", [begginingOfPath]) , "value":"true"}, {"path":sprintf("%v.securityContext.allowPrivilegeEscalation", [begginingOfPath]), "value":"false"}], "defined" : false}

getRunAsUserValue(container, pod, begginingOfPath) = runAsUser {
	failedPath := sprintf("%v.container[container_ndx].securityContext.runAsUser", [begginingOfPath]) 
    runAsUser := {"value" : container.securityContext.runAsUser,  "failedPath" : failedPath,  "fixPath": [], "defined" : true}
} else = runAsUser {
	failedPath := sprintf("%v.securityContext.runAsUser", [begginingOfPath]) 
    runAsUser := {"value" : pod.spec.securityContext.runAsUser,  "failedPath" : failedPath, "fixPath": [],"defined" : true}
} else = {"value" : 0, "failedPath": "", "fixPath": [{"path":  sprintf("%v.securityContext.runAsNonRoot", [begginingOfPath]), "value":"true"}],"defined" : false}{
	isAllowPrivilegeEscalationField(container, pod)
} else = {"value" : 0, "failedPath": "", 
	"fixPath": [{"path":  sprintf("%v.securityContext.runAsNonRoot", [begginingOfPath]), "value":"true"},{"path":  sprintf("%v.securityContext.allowPrivilegeEscalation", [begginingOfPath]), "value":"false"}],
	"defined" : false}

getRunAsGroupValue(container, pod, begginingOfPath) = runAsGroup {
	failedPath := sprintf("%v.container[container_ndx].securityContext.runAsGroup", [begginingOfPath])
    runAsGroup := {"value" : container.securityContext.runAsGroup,  "failedPath" : failedPath, "fixPath": [],"defined" : true}
} else = runAsGroup {
	failedPath := sprintf("%v.securityContext.runAsGroup", [begginingOfPath])
    runAsGroup := {"value" : pod.spec.securityContext.runAsGroup,  "failedPath" : failedPath, "fixPath":[], "defined" : true}
} else = {"value" : 0, "failedPath": "", "fixPath": [{"path": "spec.securityContext.runAsNonRoot", "value":"true"}], "defined" : false}{
	isAllowPrivilegeEscalationField(container, pod)
} else = {"value" : 0, "failedPath": "", 
	"fixPath": [{"path": sprintf("%v.securityContext.runAsNonRoot", [begginingOfPath]), "value":"true"},{"path": sprintf("%v.securityContext.allowPrivilegeEscalation", [begginingOfPath]), "value":"false"}],
 	"defined" : false
}

getAllowPrivilegeEscalation(container, pod, begginingOfPath) = allowPrivilegeEscalation {
	failedPath := sprintf("%v.container[container_ndx].securityContext.allowPrivilegeEscalation", [begginingOfPath])
    allowPrivilegeEscalation := {"value" : container.securityContext.allowPrivilegeEscalation,  "failedPath" : failedPath, "fixPath": [],"defined" : true}
} else = allowPrivilegeEscalation {
	failedPath := sprintf("%v.securityContext.allowPrivilegeEscalation", [begginingOfPath])
    allowPrivilegeEscalation := {"value" : pod.spec.securityContext.allowPrivilegeEscalation,  "failedPath" : failedPath, "fixPath": [],"defined" : true}
} else = {"value" : true, "failedPath": "", "fixPath": [{"path": sprintf("%v.securityContext.allowPrivilegeEscalation", [begginingOfPath]), "value":"false"}], "defined" : false}

chooseFirstIfDefined(l1, l2) = c {
    l1.defined
    c := l1
} else = l2


isAllowPrivilegeEscalationField(container, pod) {
	container.securityContext.allowPrivilegeEscalation == false
}

isAllowPrivilegeEscalationField(container, pod) {
	pod.spec.securityContext.allowPrivilegeEscalation == false
}
